version: '3.8'

services:
  # PostgreSQL database service
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=cloudicons
      - POSTGRES_PASSWORD=cloudicons
      - POSTGRES_DB=cloudicons
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cloudicons"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # API service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      # Cache configuration
      - CACHE_ENABLED=true
      - REDIS_URL=redis://redis:6379
      - CACHE_TTL=3600
      - ICON_CACHE_TTL=86400
      - SVG_CACHE_TTL=86400
      - MEMORY_CACHE_SIZE=1000
      # Security configuration
      - ALLOWED_ORIGINS=http://localhost:3000
      - API_KEYS=development:Development:1000:500:2000
      # Database configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=cloudicons
      - DB_USER=cloudicons
      - DB_PASSWORD=cloudicons
      - DB_SSL=false
    volumes:
      - ./public:/app/public:ro
      - ./data:/app/data:ro
      - api-node-modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Web application service
  web:
    build:
      context: ./cloudicons-web
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:3002
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_SITE_URL=http://localhost:3000
      - NEXT_PUBLIC_API_KEY=development
      - NEXT_PUBLIC_API_URL=http://localhost:3002
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis service for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data

volumes:
  redis-data:
  postgres-data:
  api-node-modules:
