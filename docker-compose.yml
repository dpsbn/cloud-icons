services:
  # PostgreSQL database service
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=cloudicons
      - POSTGRES_PASSWORD=cloudicons
      - POSTGRES_DB=cloudicons
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./api/scripts/docker-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cloudicons -d cloudicons"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # API service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    env_file:
      - .env.docker
    environment:
      # Override specific settings for Docker
      - NODE_ENV=development
    volumes:
      - ./public:/app/public:ro
      - ./data:/app/data:ro
      - api-node-modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "npm run db:migrate && npm start"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Web application service
  web:
    build:
      context: ./cloudicons-web
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:3002
    ports:
      - "3000:3000"
    env_file:
      - .env.docker
    environment:
      # Override specific settings for Docker
      - NODE_ENV=development
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis service for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data

volumes:
  redis-data:
  postgres-data:
  api-node-modules:
